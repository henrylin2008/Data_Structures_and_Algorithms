Handling Errors:
-try: This is the only mandatory clause in a try statement. The code in this block is the first thing that Python runs
      in a try statement.
-except: If Python runs into an exception while running the try block, it will jump to the except block that handles
         that exception.
-else: If Python runs into no exceptions while running the try block, it will run the code in this block after running
       the try block.
-finally: Before Python leaves this try statement, it will run the code in this finally block under any conditions, even
          if it's ending the program. E.g., if Python ran into an error while running code in the except or else block,
          this finally block will still be executed before stopping the program.


Errors:
-Syntax errors occur when Python can’t interpret our code, since we didn’t follow the correct syntax for Python. These
 are errors you’re likely to get when you make a typo, or you’re first starting to learn Python.

-Exceptions occur when unexpected things happen during execution of a program, even if the code is syntactically
 correct. There are different types of built-in exceptions in Python, and you can see which exception is thrown in the
 error message.


Python Standard Library modules:
-csv: very convenient for reading and writing csv files
-collections: useful extensions of the usual data types including OrderedDict, defaultdict and namedtuple
-random: generates pseudo-random numbers, shuffles sequences randomly and chooses random items
-string: more functions on strings. This module also contains useful collections of letters like string.digits (a string
        containing all characters which are valid digits).
-re: pattern-matching in strings via regular expressions
-math: some standard mathematical functions
-os: interacting with operating systems
-os.path: submodule of os for manipulating path names
-sys: work directly with the Python interpreter
-json: good for reading and writing json files (good for web work)


Techniques for Importing Modules
- To import an individual function or class from a module:
    * from module_name import object_name
-To import multiple individual objects from a module:
    * from module_name import first_object, second_object
-To rename a module:
    * import module_name as new_name
-To import an object from a module and rename it:
    * from module_name import object_name as new_name
-To access all the objects from a module:
    * import module_name
-Import the submodule:
    * import package_name.submodule_name


Useful Third-Party Packages
-IPython - A better interactive Python interpreter
-requests - Provides easy to use methods to make web requests. Useful for accessing web APIs.
-Flask - a lightweight framework for making web applications and APIs.
-Django - A more featureful framework for making web applications. Django is particularly good for designing complex, content heavy, web applications.
-Beautiful Soup - Used to parse HTML and extract information from it. Great for web scraping.
-pytest - extends Python's builtin assertions and unittest module.
-PyYAML - For reading and writing YAML files.
-NumPy - The fundamental package for scientific computing with Python. It contains among other things a powerful N-dimensional array object and useful linear algebra capabilities.
-pandas - A library containing high-performance, data structures and data analysis tools. In particular, pandas provides dataframes!
-matplotlib - a 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments.
-ggplot - Another 2D plotting library, based on R's ggplot2 library.
-Pillow - The Python Imaging Library adds image processing capabilities to your Python interpreter.
-pyglet - A cross-platform application framework intended for game development.
-Pygame - A set of Python modules designed for writing games.
-pytz - World Timezone Definitions for Python